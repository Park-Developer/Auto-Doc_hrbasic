'\t\t/*\n',
'\t\t0 : none\n',
'\t\t1 : header1(#)\n',
'\t\t2 : header2(##)\n',
'\t\t3 : header3(###)\n',
'\t\t4 : header4(####)\n',
'\t\t5 : emphasis\n',
'\t\t6 : mark\n',
'\t\t7 : color\n',
'\t\t8 : u\n',
'\t\t9 :\n',
'\t\t*/\n',
'\t\tlet MD_Module = {\n',
'\t\tMD_CODE: {\n',
'\t\theader_code: 0,\n',
'\t\temphasis_code: 5,\n',
'\t\tmark_code: 6,\n',
'\t\treserved_code: 7,\n',
'\t\tu_code: 8,\n',
'\t\tcolor_red_code: 11,\n',
'\t\tcolor_blue_code: 12,\n',
'\t\tcolor_yellow_code: 13,\n',
'\t\tcolor_green_code: 14,\n',
'\t\t},\n',
'\t\t\n',
'\t\t\n',
'\t\tHEADER_STYLE: {\n',
'\t\th1_size: "50px",\n',
'\t\th2_size: "40px",\n',
'\t\th3_size: "30px",\n',
'\t\th4_size: "20px",\n',
'\t\th5_size: "10px",\n',
'\t\t},\n',
'\t\t\n',
'\t\tBOLD_STYLE: {\n',
'\t\tfontWeight: "bold"\n',
'\t\t},\n',
'\t\t\n',
'\t\tUNDERLINE_STYLE: {\n',
'\t\ttextDecoration: "underline"\n',
'\t\t},\n',
'\t\t\n',
'\t\tHIGHLIGHT_STYLE: {\n',
'\t\tbackgroundColor: "#FFFF00"\n',
'\t\t},\n',
'\t\t\n',
'\t\tCOLOR_STYLE: {\n',
'\t\tyellow: "#FFFF00",\n',
'\t\tred: "#FF0000",\n',
'\t\tblue: "#0000FF",\n',
'\t\tgreen: "#008000",\n',
'\t\t},\n',
'\t\ttool: {\n',
'\t\tparag_match: function (md_stk) {\n',
'\t\tmark_loc = md_stk.indexOf(MD_Module.MD_CODE.mark_code);\n',
'\t\tcolor_red_loc = md_stk.indexOf(MD_Module.MD_CODE.color_red_code);\n',
'\t\tcolor_blue_loc = md_stk.indexOf(MD_Module.MD_CODE.color_blue_code);\n',
'\t\tcolor_yellow_loc = md_stk.indexOf(MD_Module.MD_CODE.color_yellow_code);\n',
'\t\tcolor_green_loc = md_stk.indexOf(MD_Module.MD_CODE.color_green_code);\n',
'\t\tu_loc = md_stk.indexOf(MD_Module.MD_CODE.u_code);\n',
'\t\t\n',
'\t\tlet max_idx = Math.max(mark_loc, color_yellow_loc, color_green_loc, color_blue_loc, color_red_loc, u_loc);\n',
'\t\treturn max_idx;\n',
'\t\t},\n',
'\t\t\n',
'\t\t},\n',
'\t\tgetter: {\n',
'\t\tget_headerInfo: function (line) {\n',
'\t\tif (line.indexOf("####") !== -1) {\n',
'\t\treturn 4;\n',
'\t\t} else if (line.indexOf("###") !== -1) {\n',
'\t\treturn 3;\n',
'\t\t} else if (line.indexOf("##") !== -1) {\n',
'\t\treturn 2;\n',
'\t\t} else if (line.indexOf("#") !== -1) {\n',
'\t\treturn 1;\n',
'\t\t}\n',
'\t\t},\n',
'\t\t\n',
'\t\t},\n',
'\t\tremoval: {\n',
'\t\tremove_headerMD: function (origin_line, md_info) {\n',
'\t\t//header1(#) : 1\n',
'\t\t//header2(##) : 2\n',
'\t\t//header3(###) : 3\n',
'\t\t//header4(####) : 4\n',
'\t\twhile (true) {\n',
'\t\tif (origin_line.indexOf("#") !== -1) {\n',
'\t\tlet header_loc = origin_line.indexOf("#");\n',
'\t\t\n',
'\t\torigin_line = origin_line.substr(0, header_loc) + origin_line.substr(header_loc + 1, origin_line.length);\n',
'\t\tmd_info.splice(header_loc, 1);\n',
'\t\t} else {\n',
'\t\tbreak;\n',
'\t\t}\n',
'\t\t}\n',
'\t\tlet result = {\n',
'\t\torigin_line: origin_line,\n',
'\t\tmd_info: md_info.slice()\n',
'\t\t}\n',
'\t\treturn result;\n',
'\t\t},\n',
'\t\t\n',
'\t\tremove_emphasisMD: function (origin_line, md_info) {\n',
'\t\t// emphasis code : 5\n',
'\t\twhile (true) {\n',
'\t\tif (origin_line.indexOf("__") !== -1) {\n',
'\t\tlet loc1 = origin_line.indexOf("__");\n',
'\t\t\n',
'\t\torigin_line = origin_line.substr(0, loc1) + origin_line.substr(loc1 + 2, origin_line.length);\n',
'\t\tmd_info.splice(loc1, 2);\n',
'\t\t} else {\n',
'\t\tbreak;\n',
'\t\t}\n',
'\t\t}\n',
'\t\t\n',
'\t\tlet result = {\n',
'\t\torigin_line: origin_line,\n',
'\t\tmd_info: md_info.slice(),\n',
'\t\t}\n',
'\t\treturn result;\n',
'\t\t},\n',
'\t\t\n',
'\t\tremove_markMD: function (origin_line, md_info) {\n',
'\t\t// mark code : 6\n',
'\t\twhile (true) {\n',
'\t\tif (origin_line.indexOf("@mark{") !== -1) {\n',
'\t\tlet loc = origin_line.indexOf("@mark{");\n',
'\t\t\n',
'\t\torigin_line = origin_line.substr(0, loc) + origin_line.substr(loc + 6, origin_line.length);\n',
'\t\t\n',
'\t\tmd_info.splice(loc, 6);\n',
'\t\t} else {\n',
'\t\tbreak;\n',
'\t\t}\n',
'\t\t}\n',
'\t\t\n',
'\t\tlet md_code = MD_Module.MD_CODE.mark_code;\n',
'\t\t\n',
'\t\t\n',
'\t\tlet processed_info = this.remove_closeParen(origin_line, md_info, md_code);\n',
'\t\t\n',
'\t\t\n',
'\t\tlet result = {\n',
'\t\torigin_line: processed_info.origin_line,\n',
'\t\tmd_info: processed_info.md_info.slice(),\n',
'\t\t}\n',
'\t\treturn result;\n',
'\t\t}\n',
'\t\t,\n',
'\t\tremove_uMD: function (origin_line, md_info) {\n',
'\t\t// u code : 8\n',
'\t\twhile (true) {\n',
'\t\tif (origin_line.indexOf("@u{") !== -1) {\n',
'\t\tlet loc = origin_line.indexOf("@u{");\n',
'\t\t\n',
'\t\torigin_line = origin_line.substr(0, loc) + origin_line.substr(loc + 3, origin_line.length);\n',
'\t\tmd_info.splice(loc, 3);\n',
'\t\t} else {\n',
'\t\tbreak;\n',
'\t\t}\n',
'\t\t}\n',
'\t\tlet md_code = MD_Module.MD_CODE.u_code;\n',
'\t\t\n',
'\t\tlet processed_info = this.remove_closeParen(origin_line, md_info, md_code);\n',
'\t\t\n',
'\t\t\n',
'\t\tlet result = {\n',
'\t\torigin_line: processed_info.origin_line,\n',
'\t\tmd_info: processed_info.md_info.slice(),\n',
'\t\t}\n',
'\t\treturn result;\n',
'\t\t},\n',
'\t\tremove_closeParen: function (origin_line, md_info, md_code) {\n',
'\t\tlet paren_info = {\n',
'\t\tis_find: false,\n',
'\t\tloc: -1\n',
'\t\t};\n',
'\t\tlet start_p = 0;\n',
'\t\tfor (let i = 0; i < md_info.length; i++) {\n',
'\t\tif (start_p === 0 && md_info[i].indexOf(md_code) !== -1) {\n',
'\t\tstart_p = i;\n',
'\t\t}\n',
'\t\t\n',
'\t\tif (start_p !== 0 && md_info[i].indexOf(md_code) === -1) {\n',
'\t\torigin_line = origin_line.substr(0, i) + origin_line.substr(i + 1, origin_line.length);\n',
'\t\tmd_info.splice(i, 1);\n',
'\t\tstart_p = 0;\n',
'\t\t}\n',
'\t\t\n',
'\t\t}\n',
'\t\tlet result = {\n',
'\t\torigin_line: origin_line,\n',
'\t\tmd_info: md_info.slice(),\n',
'\t\t}\n',
'\t\treturn result;\n',
'\t\t\n',
'\t\t},\n',
'\t\tremove_All_colorMD: function (origin_line, md_info, color_style) {\n',
'\t\tfunction remove_colorMD(color, origin_line, md_info) {\n',
'\t\tlet color_tag = "@" + color + "{";\n',
'\t\t\n',
'\t\twhile (true) {\n',
'\t\tif (origin_line.indexOf(color_tag) !== -1) {\n',
'\t\tlet loc = origin_line.indexOf(color_tag);\n',
'\t\torigin_line = origin_line.substr(0, loc) + origin_line.substr(loc + color_tag.length, origin_line.length);\n',
'\t\tmd_info.splice(loc, color_tag.length);\n',
'\t\t} else {\n',
'\t\tbreak;\n',
'\t\t}\n',
'\t\t}\n',
'\t\tlet result = {\n',
'\t\torigin_line: origin_line,\n',
'\t\tmd_info: md_info.slice(),\n',
'\t\t}\n',
'\t\treturn result;\n',
'\t\t}\n',
'\t\t\n',
'\t\t\n',
'\t\tlet color_lists = Object.keys(color_style);\n',
'\t\tfor (let i = 0; i < color_lists.length; i++) {\n',
'\t\tlet color = color_lists[i];\n',
'\t\tlet color_result = remove_colorMD(color, origin_line, md_info)\n',
'\t\torigin_line = color_result.origin_line;\n',
'\t\tmd_info = color_result.md_info;\n',
'\t\t\n',
'\t\tlet md_code = MD_Module.MD_CODE["color_" + color + "_code"];\n',
'\t\t\n',
'\t\t\n',
'\t\tlet processed_info = this.remove_closeParen(origin_line, md_info, md_code);\n',
'\t\t\n',
'\t\t\n',
'\t\t\n',
'\t\torigin_line = processed_info.origin_line;\n',
'\t\tmd_info = processed_info.md_info.slice();\n',
'\t\t\n',
'\t\t}\n',
'\t\t\n',
'\t\tlet result = {\n',
'\t\torigin_line: origin_line,\n',
'\t\tmd_info: md_info.slice()\n',
'\t\t}\n',
'\t\treturn result;\n',
'\t\t\n',
'\t\t},\n',
'\t\tremove_Allmd: function (origin_line, md_info) {\n',
'\t\tlet header_result = this.remove_headerMD(origin_line, md_info);\n',
'\t\torigin_line = header_result.origin_line;\n',
'\t\tmd_info = header_result.md_info;\n',
'\t\t\n',
'\t\tlet emphasis_result = this.remove_emphasisMD(origin_line, md_info);\n',
'\t\torigin_line = emphasis_result.origin_line;\n',
'\t\tmd_info = emphasis_result.md_info;\n',
'\t\t\n',
'\t\tlet mark_result = this.remove_markMD(origin_line, md_info);\n',
'\t\torigin_line = mark_result.origin_line;\n',
'\t\tmd_info = mark_result.md_info;\n',
'\t\t\n',
'\t\tlet u_result = this.remove_uMD(origin_line, md_info);\n',
'\t\torigin_line = u_result.origin_line;\n',
'\t\tmd_info = u_result.md_info;\n',
'\t\t\n',
'\t\tconst COLOR_STYLE = {\n',
'\t\tyellow: "#FFFF00",\n',
'\t\tred: "#FF0000",\n',
'\t\tblue: "#0000FF",\n',
'\t\tgreen: "#008000",\n',
'\t\t}\n',
'\t\tlet color_result = this.remove_All_colorMD(origin_line, md_info, COLOR_STYLE);\n',
'\t\torigin_line = color_result.origin_line;\n',
'\t\tmd_info = color_result.md_info;\n',
'\t\t\n',
'\t\tlet result = {\n',
'\t\torigin_line: origin_line,\n',
'\t\tmd_info: md_info.slice()\n',
'\t\t}\n',
'\t\treturn result;\n',
'\t\t}\n',
'\t\t},\n',
'\t\tcreator: {\n',
'\t\tcreate_MDinfo: function (line) {\n',
'\t\tfunction check_header_Instack(stack) {\n',
'\t\tlet result = false;\n',
'\t\tfor (let i = 0; i < 4; i++) {\n',
'\t\tif (stack.indexOf(i + 1) !== -1) {\n',
'\t\tresult = true;\n',
'\t\tbreak;\n',
'\t\t}\n',
'\t\t}\n',
'\t\treturn result;\n',
'\t\t};\n',
'\t\t//initial setting\n',
'\t\tlet line_len = line.length;\n',
'\t\tlet md_stk = [];\n',
'\t\t\n',
'\t\tlet line_info = [];\n',
'\t\tfor (let j = 0; j < line_len; j++) {\n',
'\t\tline_info.push([]);\n',
'\t\t}\n',
'\t\t\n',
'\t\tfor (let i = 0; i < line_len; i++) {\n',
'\t\t// [MD 검사]\n',
'\t\tif (line[i] === "#" && check_header_Instack(md_stk) === false) {\n',
'\t\theader_code = MD_Module.getter.get_headerInfo(line);\n',
'\t\tmd_stk.push(header_code);\n',
'\t\t} else if (line[i] === "_" && line[i + 1] === "_") {\n',
'\t\tconsole.log(i);\n',
'\t\tif (md_stk.indexOf(MD_Module.MD_CODE.emphasis_code) !== -1) {\n',
'\t\t// close tag\n',
'\t\tlet close_idx = md_stk.indexOf(5);\n',
'\t\tif (close_idx > -1) {\n',
'\t\tmd_stk.splice(close_idx, 1);\n',
'\t\t}\n',
'\t\t} else {\n',
'\t\t// open tag\n',
'\t\tif (line.indexOf("__", i + 2) !== -1) {\n',
'\t\tmd_stk.push(MD_Module.MD_CODE.emphasis_code);\n',
'\t\t}\n',
'\t\t}\n',
'\t\t} else if (line[i] === "@" && line[i + 1] === "m") { //  mark_code=6;\n',
'\t\tmd_stk.push(MD_Module.MD_CODE.mark_code);\n',
'\t\t} else if (line[i] === "@" && line[i + 1] === "r") { // color_code=7;\n',
'\t\tmd_stk.push(MD_Module.MD_CODE.color_red_code);\n',
'\t\t} else if (line[i] === "@" && line[i + 1] === "b") { // color_code=7;\n',
'\t\tmd_stk.push(MD_Module.MD_CODE.color_blue_code);\n',
'\t\t} else if (line[i] === "@" && line[i + 1] === "y") { // color_code=7;\n',
'\t\tmd_stk.push(MD_Module.MD_CODE.color_yellow_code);\n',
'\t\t} else if (line[i] === "@" && line[i + 1] === "g") { // color_code=7;\n',
'\t\tmd_stk.push(MD_Module.MD_CODE.color_green_code);\n',
'\t\t} else if (line[i] === "@" && line[i + 1] === "u") { // u_code=8;\n',
'\t\tmd_stk.push(MD_Module.MD_CODE.u_code);\n',
'\t\t} else if (line[i] === "}") {\n',
'\t\tlet remove_idx = MD_Module.tool.parag_match(md_stk);\n',
'\t\tmd_stk.splice(remove_idx, 1);\n',
'\t\t}\n',
'\t\t\n',
'\t\t// [MD 적용]\n',
'\t\tline_info[i] = md_stk.slice();\n',
'\t\t\n',
'\t\t}\n',
'\t\t\n',
'\t\t\n',
'\t\tconsole.log(line_info);\n',
'\t\treturn line_info;\n',
'\t\t\n',
'\t\t},\n',
'\t\t/*\n',
'\t\theader_code : 0,\n',
'\t\temphasis_code : 5,\n',
'\t\tmark_code  :6,\n',
'\t\tcolor_code : 7,\n',
'\t\tu_code: 8,\n',
'\t\tMD_Module\n',
'\t\t\n',
'\t\t*/\n',
'\t\tcreate_spanDIV: function (parent_node, processed_line, processed_md_info) {\n',
'\t\tif (processed_line.length !== processed_md_info.length) {\n',
'\t\talert("create span div error!");\n',
'\t\t}\n',
'\t\tfor (let i = 0; i < processed_line.length; i++) {\n',
'\t\tlet span_tag = document.createElement("span"); //\n',
'\t\tspan_tag.innerText = processed_line[i];\n',
'\t\t\n',
'\t\t// [1] header md check______\n',
'\t\tif (processed_md_info[i].indexOf(1) !== -1) {\n',
'\t\tspan_tag.style.fontSize = MD_Module.HEADER_STYLE.h1_size;\n',
'\t\t}\n',
'\t\tif (processed_md_info[i].indexOf(2) !== -1) {\n',
'\t\t\n',
'\t\tspan_tag.style.fontSize = MD_Module.HEADER_STYLE.h2_size;\n',
'\t\t}\n',
'\t\tif (processed_md_info[i].indexOf(3) !== -1) {\n',
'\t\tspan_tag.style.fontSize = MD_Module.HEADER_STYLE.h3_size;\n',
'\t\t}\n',
'\t\tif (processed_md_info[i].indexOf(4) !== -1) {\n',
'\t\tspan_tag.style.fontSize = MD_Module.HEADER_STYLE.h4_size;\n',
'\t\t}\n',
'\t\t\n',
'\t\t// [2] emphasize md check______\n',
'\t\tif (processed_md_info[i].indexOf(5) !== -1) {\n',
'\t\tspan_tag.style.fontWeight = MD_Module.BOLD_STYLE.fontWeight;\n',
'\t\t}\n',
'\t\t\n',
'\t\t// [3] mark md check______\n',
'\t\tif (processed_md_info[i].indexOf(6) !== -1) {\n',
'\t\tspan_tag.style.backgroundColor = MD_Module.HIGHLIGHT_STYLE.backgroundColor;\n',
'\t\t}\n',
'\t\t\n',
'\t\t// [4] u md check______\n',
'\t\tif (processed_md_info[i].indexOf(8) !== -1) {\n',
'\t\tspan_tag.style.textDecoration = MD_Module.UNDERLINE_STYLE.textDecoration;\n',
'\t\t}\n',
'\t\t\n',
'\t\t// [5] color md check______(color range : 11 ~ )\n',
'\t\tif (processed_md_info[i].indexOf(11) !== -1) { //     color_red_code:11,\n',
'\t\tspan_tag.style.color = MD_Module.COLOR_STYLE.red;\n',
'\t\t}\n',
'\t\tif (processed_md_info[i].indexOf(12) !== -1) { //        color_blue_code:12,\n',
'\t\tspan_tag.style.color = MD_Module.COLOR_STYLE.blue;\n',
'\t\t}\n',
'\t\tif (processed_md_info[i].indexOf(13) !== -1) { //      color_yellow_code:13,\n',
'\t\tspan_tag.style.color = MD_Module.COLOR_STYLE.yellow;\n',
'\t\t}\n',
'\t\tif (processed_md_info[i].indexOf(14) !== -1) { //         color_green_code:14,\n',
'\t\tspan_tag.style.color = MD_Module.COLOR_STYLE.green;\n',
'\t\t}\n',
'\t\t\n',
'\t\tparent_node.appendChild(span_tag);\n',
'\t\t}\n',
'\t\t},\n',
'\t\t}\n',
'\t\t\n',
'\t\t}\n',
'\t\t\n',
'\t\tlet testdiv = document.querySelector(".test");\n',
'\t\ttestdiv.display = "flex";\n',
'\t\t\n',
'\t\tlet raw_line = "__r__@u{a@mark{sd}h}l__ld__o##a@red{d}s__@blue{d}g__g";\n',
'\t\tlet raw_mdinfo = MD_Module.creator.create_MDinfo(raw_line);\n',
'\t\t\n',
'\t\t\n',
'\t\tlet converted = MD_Module.removal.remove_Allmd(raw_line, raw_mdinfo);\n',
'\t\t\n',
'\t\tlet processed_line = converted.origin_line;\n',
'\t\tlet processed_info = converted.md_info;\n',
'\t\t\n',
'\t\tMD_Module.creator.create_spanDIV(testdiv, processed_line, processed_info);\n',
